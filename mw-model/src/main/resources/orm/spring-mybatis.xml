<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

        <!-- 注册数据库的链接信息 -->
        <context:property-placeholder location="classpath:config.properties"/>
        <!-- 配置业务001的dataSource数据源 -->
        <bean id="businessDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <!-- 数据库基本信息配置 -->
            <property name="driverClassName" value="${jdbc.driver}" />
            <property name="url" value="${jdbc1.url}" />
            <property name="username" value="${jdbc1.user}" />
            <property name="password" value="${jdbc1.password}" />
            <!-- 初始化连接数量 -->
            <property name="initialSize" value="${druid.initialSize}" />
            <!-- 最大并发连接数 -->
            <property name="maxActive" value="${druid.maxActive}" />
            <!-- 最大空闲连接数 -->
            <!-- <property name="maxIdle" value="${druid.maxIdle}" /> -->
            <!-- 最小空闲连接数 -->
            <property name="minIdle" value="${druid.minIdle}" />
            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="${druid.maxWait}" />
            <!-- 超过时间限制是否回收 -->
            <property name="removeAbandoned" value="${druid.removeAbandoned}" />
            <!-- 超过时间限制多长 -->
            <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
            <!-- 关闭abanded连接时输出错误日志 -->
            <property name="logAbandoned" value="${druid.logAbandoned}" />
            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
            <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
            <property name="validationQuery" value="${druid.validationQuery}" />
            <!-- 申请连接的时候检测 -->
            <property name="testWhileIdle" value="${druid.testWhileIdle}" />
            <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
            <property name="testOnBorrow" value="${druid.testOnBorrow}" />
            <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
            <property name="testOnReturn" value="${druid.testOnReturn}" />
            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
            <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
            <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat, 日志用的filter:log4j, 防御SQL注入的filter:wall -->
            <!--<property name="filters" value="${druid.filters}" />-->
            <property name="proxyFilters">
                <list>
                    <ref bean="stat-filter" />
                </list>
            </property>
        </bean>

        <!-- druid -->
        <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
            <property name="slowSqlMillis" value="10000" />
            <property name="logSlowSql" value="true" />
        </bean>

        <bean id="druid-stat-interceptor"
              class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
        </bean>

        <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
              scope="prototype">
            <property name="patterns">
                <list>
                    <value>net.health.dao.*</value>
                </list>
            </property>
        </bean>
        <aop:config>
            <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
        </aop:config>

        <!-- 配置mybatis SqlSessionFactory -->
        <!--<bean id="paginationInterceptor" class="net.health.util.mybatis.PaginationInterceptor"></bean>-->
        <bean id="businessSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="businessDataSource"/>
            <property name="configurationProperties">
                <props>
                    <prop key="dialect">mysql</prop>
                </props>
            </property>
            <!--<property name="plugins" ref="paginationInterceptor"></property>-->
            <property name="configLocation" value="classpath:orm/mybatis-config.xml"></property>
        </bean>

        <!-- mapper自动注入 -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="com.water.db.dao*"/>
            <property name="sqlSessionFactoryBeanName" value="businessSqlSessionFactory"/>
        </bean>

        <!-- 配置事务管理器bean,使用DatasourceTransactionManager事务管理器 -->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="businessDataSource"/>
        </bean>
        <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>